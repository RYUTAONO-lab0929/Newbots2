//@version=5
indicator("ETH Auto Trading Indicator", overlay=true, max_lines_count=500, max_labels_count=500)

//==== Input Parameters ====
adx_len = input.int(32, "ADX期間")
adx_thresh = input.float(35.8, "ADX閾値")
donchian_len = input.int(42, "ドンチャン期間")
fast_ema_len = input.int(9, "高速EMA")
slow_ema_len = input.int(21, "低速EMA")
trend_rsi_len = input.int(45, "トレンドRSI期間")

bb_len = input.int(24, "BB期間")
bb_dev = input.float(2.85, "BB標準偏差")
range_rsi_len = input.int(16, "レンジRSI期間")
rsi_low = input.float(28, "RSI売られすぎ")
rsi_high = input.float(72, "RSI買われすぎ")

atr_len = input.int(14, "ATR期間")
sl_mult = input.float(1.82, "ストップロス倍率")
tp_mult = input.float(3.25, "テイクプロフィット倍率")

show_signals = input.bool(true, "シグナル表示")
show_sl_tp = input.bool(true, "SL/TP表示")
show_debug = input.bool(true, "デバッグ情報表示")

//==== Indicator Calculations ====
adx_value = ta.adx(adx_len)
ema_fast = ta.ema(close, fast_ema_len)
ema_slow = ta.ema(close, slow_ema_len)

rsi_trend = ta.rsi(close, trend_rsi_len)
rsi_range = ta.rsi(close, range_rsi_len)

bb_basis = ta.sma(close, bb_len)
bb_dev_val = bb_dev * ta.stdev(close, bb_len)
bb_upper = bb_basis + bb_dev_val
bb_lower = bb_basis - bb_dev_val
bb_position = (close - bb_lower) / (bb_upper - bb_lower)

atr_value = ta.atr(atr_len)

is_trend = adx_value > adx_thresh
is_range = not is_trend

// Donchian Channel
Don_up = ta.highest(high, donchian_len)
Don_low = ta.lowest(low, donchian_len)
Don_mid = (Don_up + Don_low) / 2

pDonUp = plot(Don_up, "Donchian Upper", color.new(color.red, 70))
pDonLow = plot(Don_low, "Donchian Lower", color.new(color.green, 70))
plot(Don_mid, "Donchian Middle", color.new(color.yellow, 70), style=plot.style_stepline)

// EMA
plot(ema_fast, "EMA Fast", color=color.aqua, linewidth=2)
plot(ema_slow, "EMA Slow", color=color.orange, linewidth=2)

// Bollinger Bands
plot(bb_upper, "BB Upper", color.new(color.purple, 70))
plot(bb_lower, "BB Lower", color.new(color.purple, 70))
plot(bb_basis, "BB Basis", color.new(color.purple, 70), style=plot.style_stepline)

// Background color
bgcolor(is_trend ? color.new(color.blue, 95) : color.new(color.gray, 95))

//==== Entry Conditions ====
cond_trend_long = is_trend and close > Don_up[1] and ema_fast > ema_slow and (rsi_trend > 30 and rsi_trend < 70)
cond_range_long = is_range and bb_position <= 0.2 and rsi_range <= rsi_low
cond_range_short = is_range and bb_position >= 0.8 and rsi_range >= rsi_high

long_signal = (cond_trend_long or cond_range_long)
short_signal = cond_range_short

long_signal_new = long_signal and not long_signal[1]
short_signal_new = short_signal and not short_signal[1]

plotshape(long_signal_new and show_signals, title="Long", location=location.belowbar, color=color.green, style=shape.triangleup, size=size.small)
plotshape(short_signal_new and show_signals, title="Short", location=location.abovebar, color=color.red, style=shape.triangledown, size=size.small)

//==== Stop Loss and Take Profit ====
var float entry_price = na
var float sl_price = na
var float tp_price = na
var int position = 0
var line sl_line = na
var line tp_line = na

if long_signal_new
    entry_price := close
    sl_price := entry_price - atr_value * sl_mult
    tp_price := entry_price + atr_value * tp_mult
    position := 1
    if show_sl_tp
        line.delete(sl_line)
        line.delete(tp_line)
        sl_line := line.new(bar_index, sl_price, bar_index + 1, sl_price, color=color.red, style=line.style_dotted, extend=extend.right)
        tp_line := line.new(bar_index, tp_price, bar_index + 1, tp_price, color=color.green, style=line.style_dotted, extend=extend.right)

if short_signal_new
    entry_price := close
    sl_price := entry_price + atr_value * sl_mult
    tp_price := entry_price - atr_value * tp_mult
    position := -1
    if show_sl_tp
        line.delete(sl_line)
        line.delete(tp_line)
        sl_line := line.new(bar_index, sl_price, bar_index + 1, sl_price, color=color.red, style=line.style_dotted, extend=extend.right)
        tp_line := line.new(bar_index, tp_price, bar_index + 1, tp_price, color=color.green, style=line.style_dotted, extend=extend.right)

if position == 1 and (low <= sl_price or high >= tp_price)
    position := 0
    line.delete(sl_line)
    line.delete(tp_line)
    sl_price := na
    tp_price := na

if position == -1 and (high >= sl_price or low <= tp_price)
    position := 0
    line.delete(sl_line)
    line.delete(tp_line)
    sl_price := na
    tp_price := na

//==== Info Panel ====
var table info_tbl = table.new(position.top_right, 2, 8)
if barstate.islast
    table.cell(info_tbl, 0, 0, "レジーム")
    table.cell(info_tbl, 1, 0, is_trend ? "トレンド" : "レンジ")
    table.cell(info_tbl, 0, 1, "ADX")
    table.cell(info_tbl, 1, 1, str.tostring(adx_value, format.mintick))
    table.cell(info_tbl, 0, 2, "RSI")
    table.cell(info_tbl, 1, 2, str.tostring(is_trend ? rsi_trend : rsi_range, format.mintick))
    table.cell(info_tbl, 0, 3, "BB位置")
    table.cell(info_tbl, 1, 3, str.tostring(bb_position * 100, '#.##') + "%")
    table.cell(info_tbl, 0, 4, "EMA状態")
    table.cell(info_tbl, 1, 4, ema_fast > ema_fast[1] ? "上昇" : "下降")
    table.cell(info_tbl, 0, 5, "シグナル")
    table.cell(info_tbl, 1, 5, long_signal_new ? "買い" : short_signal_new ? "売り" : "なし")
    table.cell(info_tbl, 0, 6, "ポジション")
    table.cell(info_tbl, 1, 6, position == 1 ? "ロング" : position == -1 ? "ショート" : "なし")
    table.cell(info_tbl, 0, 7, "現在価格")
    table.cell(info_tbl, 1, 7, str.tostring(close, format.mintick))

//==== Debug Info ====
var label debug_lb = na
if show_debug and barstate.islast
    label.delete(debug_lb)
    debug_txt = "TrendLong:" + (cond_trend_long ? "○" : "×") + " " + "RangeLong:" + (cond_range_long ? "○" : "×") + " " + "RangeShort:" + (cond_range_short ? "○" : "×") + "\n" + "ADX:" + str.tostring(adx_value, format.mintick) + "(" + (is_trend ? "Trend" : "Range") + ")\n" + "BBPos:" + str.tostring(bb_position, '#.##') + " RSI:" + str.tostring(is_trend ? rsi_trend : rsi_range, format.mintick)
    debug_lb := label.new(bar_index + 1, close, debug_txt, xloc.bar_index, yloc.price, color.new(color.black, 0), textcolor=color.white, size=size.small)

//==== Alerts ====
alertcondition(long_signal_new, title="Long Entry", message="Long Entry")
alertcondition(short_signal_new, title="Short Entry", message="Short Entry")
